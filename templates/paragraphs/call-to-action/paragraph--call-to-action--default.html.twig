{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% apply spaceless %}
  {% embed '@bootstrap_italia_paragraph/content/bi-paragraph-base.html.twig' with {
    paragraph: paragraph,
    content: content,
    attributes: attributes,
    view_mode: view_mode,
    logged_in: logged_in,
    is_admin: is_admin
  } %}
    {% block content %}
      {# Azione;icon;type #}
      {% set _azione = content.field_azione|render|striptags|trim|split(';') %}

      {{ content|without('field_azione','field_icon_name','field_call_to_action') }}

      {% embed '@bi-bcl/button/button.html.twig' with {
        tag: 'a',
        id: id ~ '--action-button',
        label: _azione[0],
        url: content.field_call_to_action.0['#url_title'],
        variant: 'primary',
        size: 'lg',
        button_classes: ['me-1', 'btn-icon'],
        button_attributes: _azione[2] is not empty ? create_attribute().setAttribute('data-element', _azione[2])
      } %}
        {% block before -%}
          {% if content.field_icon_name.0 or _azione[1] %}
            <span class="rounded-icon">
              {% include '@bi-bcl/icon/icon.html.twig' with {
                name: content.field_icon_name.0['#context']['value'] ?: _azione[1],
                size: 'sm',
                color: 'primary',
              } %}
            </span>&nbsp;
          {% endif %}
        {%- endblock %}
      {% endembed %}

    {% endblock %}
  {% endembed %}
{% endapply %}
